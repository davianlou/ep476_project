
	Aerodynamic students usually deal with complicated aerodynamic and computational fluid analysis. Conventionally, most students have to develop relatively nested matlab or Python codes to analyze some important aerodynamic features, such as lift, drag or vortices. In this case, high programming skills are required and the effort to develop codes is proportional to the complexity of the problems. Thus, it will be convenient for students to have a special aerodynamic tool that enables them to quickly solve the problems by just typing in simple commands. 
Aerodynamic problems vary from cases to cases. And for our purpose, we are seeking to develop a multi-functional IPython Notebook interface that allows users to operate various aerodynamic analyses for different airfoil wings. Our project is based on standard NACA airfoil nomenclature, which utilizes 4 or 5 digits of number to describe the shape of airfoil. We will also develop several classical methods in the interface to calculate lift, drag, potential, vortices and etc., including panel methods, Joukouski conformal mapping and etc. Therefore, users may perform any aerodynamic analysis, such as lift computing, that is supported by our interface by giving a series of number that represents their interested airfoil. Also, we will manipulate the plot commanding such that this special IPython Notebook will allow users to generate neat pictures for their purposes. For example, attempt to plot streamlines often gives overlapping streamlines at some critical points; shock wave and stagnation point gap are easily missed in the plot if programmers are not careful. These problems worth attention when we design our IPython Notebook interface. Another consideration of our project is its level of hardness and sophistication. Problems are increasingly complicated if we consider the viscous effects and sonic influence. Therefore, in order to maintain the hardness of this program in a reasonable level, we may make several simplifications and assumptions.
One significant progress of our project is its convenience and efficiency. This IPython Notebook will have frequently used built-in functions and therefore considerably saves time developing codes and debugging for aerodynamic students. For example, I personally spent 5 to 6 hours writing matlab codes to calculate the lift over a simple cylinder using panel methods. It can be imagined that effort will be considerably increasing as more complicated airfoil shape is dealt with. We expect that our IPython Notebook interface will be a handy tool for aerodynamic students and any one who is interested in the magic of flying. 

